sobelxKernel = np.matrix('-1,-2,-1; 0,0,0; 1,2,1')
sobelykernel = np.matrix('-1, 0, 1; -2, 0, 2; -1, 0, 1')
#Variables
changeFrame = False
startTime = time.time()
framenumber = 0
fps = out.get(cv.CAP_PROP_POS_MSEC)
while (mov.isOpened()):
ret,frame = mov.read()
if ret == True:
framenumber = framenumber + 1
print("time = " + framenumber/fps)
#Frames
showFrame = frame
original = cv.filter2D(frame, -1, normalKernel)
sharp = cv.filter2D(frame,-1,sharpenKernel)
blur = cv.filter2D(frame, -1, gblurKernel1)
blurBig = cv.filter2D(frame, -1, gblurKernel2)
##Frame to BGR Grayscale
grayv1 = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
gray = cv.cvtColor(grayv1, cv.COLOR_GRAY2BGR)
##Colorspaces
rgb = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
hsv = cv.cvtColor(gray, cv.COLOR_BGR2HSV)
##Threshold frame
true_hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
lower_bound = np.array([30,55,0])
upper_bound = np.array([70,255,255])
lower_bound_rgb = np.array([50, 80, 0])
upper_bound_rgb = np.array([255, 255, 255])
### Use blur for smoothing
true_hsv_blur = cv.cvtColor(blur, cv.COLOR_BGR2HSV)
### Mask for range and Res for color
mask_bgr = cv.inRange(frame, lower_bound_rgb, upper_bound_rgb)
mask_hsv = cv.inRange(true_hsv, lower_bound, upper_bound)
mask_blur = cv.inRange(true_hsv_blur, lower_bound, upper_bound)
res_bgr = cv.bitwise_and(frame, frame, mask=mask_bgr)
res_hsv = cv.bitwise_and(frame, frame, mask=mask_hsv)
res_blur = cv.bitwise_and(frame, frame, mask=mask_blur)
#Edge detection
#sobel_x = cv.filter2D(grayv1, -1, sobelxKernel)
gray_blur = cv.GaussianBlur(grayv1, (13,13), 0)
canny = cv.Canny(blur, 20, 70)
gray2canny = cv.Canny(gray, 20,70)
sobel_x_f = cv.Sobel(grayv1, cv.CV_64F, 1, 0, ksize=3)
sobel_x = cv.convertScaleAbs(sobel_x_f)
sobel_y_f = cv.Sobel(grayv1, cv.CV_64F, 0, 1, ksize=3)
sobel_y = cv.convertScaleAbs(sobel_y_f)
##Draw contours
contours_x, hiearchy_x = cv.findContours(sobel_x, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#cv.drawContours(showFrame, contours_x, -1, (0,255,0), 3)
contours_y, hiearchy_y = cv.findContours(sobel_y, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
##Canny contours
contours_c, h_c = cv.findContours(canny, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#Mean Squared Error
##Flashy rectangle (now circle)
if time.time() - startTime < 10:
circleColor = (255,225,0)
if time.time() - startTime >= 10 and time.time() - startTime < 30:
circleColor = (0,225,255)
if time.time() - startTime >= 30 and time.time() - startTime < 50:
circleColor = (0,225,0)
##Grayscale map
res_templ = cv.matchTemplate(grayv1, template, cv.TM_CCOEFF_NORMED)
#Hough transformation
filter_gray = cv.cvtColor(res_blur, cv.COLOR_BGR2GRAY)
circles = cv.HoughCircles(filter_gray, cv.HOUGH_GRADIENT, 1, 300, param1=30, param2=10, minRadius=50, maxRadius=200)
#circleColor = (0,225,255)
if circles is not None:
circles = np.uint16(np.around(circles))
for i in circles[0,:]:
cv.circle(showFrame, (i[0], i[1]), i[2], circleColor, 2)
#Subtitle
subtitle = ""
#Switch frames
if time.time() - startTime < 10:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 10 and time.time() - startTime < 30:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 30 and time.time() - startTime < 50:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 50 and time.time() - startTime < 70:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 70 and time.time() - startTime < 90:
showFrame = blur
subtitle = "Medium Blur"
if time.time() - startTime >= 90 and time.time() - startTime < 110:
showFrame = blurBig
subtitle = "Large Blur"
if time.time() - startTime >= 110 and time.time() - startTime < 140:
showFrame = rgb
subtitle = "RGB"
if time.time() - startTime >= 140 and time.time() - startTime < 170:
showFrame = hsv
subtitle = "HSV"
if time.time() - startTime >= 170:
showFrame = sharp
subtitle = "Sharpen"
showFrame = frame
#cv.drawContours(showFrame, contours_c, -1, (0,255,0), 3)
cv.putText(showFrame, subtitle, (10, 100), cv.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
cv.imshow('test',res_templ)
#out.write(showFrame)
if cv.waitKey(25) & 0xFF == ord('q'):
break
else:
break
mov.release()
cv.destroyAllWindows()
import cv2 as cv
import numpy as np
import time
mov = cv.VideoCapture('../resources/60secondsT.mp4')
#mov = cv.VideoCapture('D:/GoPro tennis/tenniscut1.mp4')
#mov = cv.VideoCapture(0)
width = int(mov.get(3))
height = int(mov.get(4))
out = cv.VideoWriter('../resources/outputCollorSpace.avi',
cv.VideoWriter_fourcc('M','J','P','G'),
30, (width, height))
template = cv.imread('../resources/template.jpg', 0)
test = cv.imread('../resources/test.jpg')
#Initialize Kernels
sharpenKernel = np.full((3,3), -1)
sharpenKernel[2][2] = 8
gblurKernel1 = np.full((9,9), 1/81)
gblurKernel2 = np.full((15,15), 1/225)
normalKernel = np.full((3,3), 0)
normalKernel[2][2] = 1
sobelxKernel = np.matrix('-1,-2,-1; 0,0,0; 1,2,1')
sobelykernel = np.matrix('-1, 0, 1; -2, 0, 2; -1, 0, 1')
#Variables
changeFrame = False
startTime = time.time()
framenumber = 0
fps = out.get(cv.CAP_PROP_POS_MSEC)
while (mov.isOpened()):
ret,frame = mov.read()
if ret == True:
framenumber = framenumber + 1
print("time = " + str(framenumber/fps))
#Frames
showFrame = frame
original = cv.filter2D(frame, -1, normalKernel)
sharp = cv.filter2D(frame,-1,sharpenKernel)
blur = cv.filter2D(frame, -1, gblurKernel1)
blurBig = cv.filter2D(frame, -1, gblurKernel2)
##Frame to BGR Grayscale
grayv1 = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
gray = cv.cvtColor(grayv1, cv.COLOR_GRAY2BGR)
##Colorspaces
rgb = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
hsv = cv.cvtColor(gray, cv.COLOR_BGR2HSV)
##Threshold frame
true_hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
lower_bound = np.array([30,55,0])
upper_bound = np.array([70,255,255])
lower_bound_rgb = np.array([50, 80, 0])
upper_bound_rgb = np.array([255, 255, 255])
### Use blur for smoothing
true_hsv_blur = cv.cvtColor(blur, cv.COLOR_BGR2HSV)
### Mask for range and Res for color
mask_bgr = cv.inRange(frame, lower_bound_rgb, upper_bound_rgb)
mask_hsv = cv.inRange(true_hsv, lower_bound, upper_bound)
mask_blur = cv.inRange(true_hsv_blur, lower_bound, upper_bound)
res_bgr = cv.bitwise_and(frame, frame, mask=mask_bgr)
res_hsv = cv.bitwise_and(frame, frame, mask=mask_hsv)
res_blur = cv.bitwise_and(frame, frame, mask=mask_blur)
#Edge detection
#sobel_x = cv.filter2D(grayv1, -1, sobelxKernel)
gray_blur = cv.GaussianBlur(grayv1, (13,13), 0)
canny = cv.Canny(blur, 20, 70)
gray2canny = cv.Canny(gray, 20,70)
sobel_x_f = cv.Sobel(grayv1, cv.CV_64F, 1, 0, ksize=3)
sobel_x = cv.convertScaleAbs(sobel_x_f)
sobel_y_f = cv.Sobel(grayv1, cv.CV_64F, 0, 1, ksize=3)
sobel_y = cv.convertScaleAbs(sobel_y_f)
##Draw contours
contours_x, hiearchy_x = cv.findContours(sobel_x, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#cv.drawContours(showFrame, contours_x, -1, (0,255,0), 3)
contours_y, hiearchy_y = cv.findContours(sobel_y, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
##Canny contours
contours_c, h_c = cv.findContours(canny, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#Mean Squared Error
##Flashy rectangle (now circle)
if time.time() - startTime < 10:
circleColor = (255,225,0)
if time.time() - startTime >= 10 and time.time() - startTime < 30:
circleColor = (0,225,255)
if time.time() - startTime >= 30 and time.time() - startTime < 50:
circleColor = (0,225,0)
##Grayscale map
res_templ = cv.matchTemplate(grayv1, template, cv.TM_CCOEFF_NORMED)
#Hough transformation
filter_gray = cv.cvtColor(res_blur, cv.COLOR_BGR2GRAY)
circles = cv.HoughCircles(filter_gray, cv.HOUGH_GRADIENT, 1, 300, param1=30, param2=10, minRadius=50, maxRadius=200)
#circleColor = (0,225,255)
if circles is not None:
circles = np.uint16(np.around(circles))
for i in circles[0,:]:
cv.circle(showFrame, (i[0], i[1]), i[2], circleColor, 2)
#Subtitle
subtitle = ""
#Switch frames
if time.time() - startTime < 10:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 10 and time.time() - startTime < 30:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 30 and time.time() - startTime < 50:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 50 and time.time() - startTime < 70:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 70 and time.time() - startTime < 90:
showFrame = blur
subtitle = "Medium Blur"
if time.time() - startTime >= 90 and time.time() - startTime < 110:
showFrame = blurBig
subtitle = "Large Blur"
if time.time() - startTime >= 110 and time.time() - startTime < 140:
showFrame = rgb
subtitle = "RGB"
if time.time() - startTime >= 140 and time.time() - startTime < 170:
showFrame = hsv
subtitle = "HSV"
if time.time() - startTime >= 170:
showFrame = sharp
subtitle = "Sharpen"
showFrame = frame
#cv.drawContours(showFrame, contours_c, -1, (0,255,0), 3)
cv.putText(showFrame, subtitle, (10, 100), cv.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
cv.imshow('test',res_templ)
#out.write(showFrame)
if cv.waitKey(25) & 0xFF == ord('q'):
break
else:
break
mov.release()
cv.destroyAllWindows()
import cv2 as cv
import numpy as np
import time
mov = cv.VideoCapture('../resources/60secondsT.mp4')
#mov = cv.VideoCapture('D:/GoPro tennis/tenniscut1.mp4')
#mov = cv.VideoCapture(0)
width = int(mov.get(3))
height = int(mov.get(4))
out = cv.VideoWriter('../resources/outputCollorSpace.avi',
cv.VideoWriter_fourcc('M','J','P','G'),
30, (width, height))
template = cv.imread('../resources/template.jpg', 0)
test = cv.imread('../resources/test.jpg')
#Initialize Kernels
sharpenKernel = np.full((3,3), -1)
sharpenKernel[2][2] = 8
gblurKernel1 = np.full((9,9), 1/81)
gblurKernel2 = np.full((15,15), 1/225)
normalKernel = np.full((3,3), 0)
normalKernel[2][2] = 1
sobelxKernel = np.matrix('-1,-2,-1; 0,0,0; 1,2,1')
sobelykernel = np.matrix('-1, 0, 1; -2, 0, 2; -1, 0, 1')
#Variables
changeFrame = False
startTime = time.time()
framenumber = 0
fps = out.get(cv.CAP_PROP_POS_MSEC)
while (mov.isOpened()):
ret,frame = mov.read()
if ret == True:
framenumber = framenumber + 1
print("time = " + str(fps))
#Frames
showFrame = frame
original = cv.filter2D(frame, -1, normalKernel)
sharp = cv.filter2D(frame,-1,sharpenKernel)
blur = cv.filter2D(frame, -1, gblurKernel1)
blurBig = cv.filter2D(frame, -1, gblurKernel2)
##Frame to BGR Grayscale
grayv1 = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
gray = cv.cvtColor(grayv1, cv.COLOR_GRAY2BGR)
##Colorspaces
rgb = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
hsv = cv.cvtColor(gray, cv.COLOR_BGR2HSV)
##Threshold frame
true_hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
lower_bound = np.array([30,55,0])
upper_bound = np.array([70,255,255])
lower_bound_rgb = np.array([50, 80, 0])
upper_bound_rgb = np.array([255, 255, 255])
### Use blur for smoothing
true_hsv_blur = cv.cvtColor(blur, cv.COLOR_BGR2HSV)
### Mask for range and Res for color
mask_bgr = cv.inRange(frame, lower_bound_rgb, upper_bound_rgb)
mask_hsv = cv.inRange(true_hsv, lower_bound, upper_bound)
mask_blur = cv.inRange(true_hsv_blur, lower_bound, upper_bound)
res_bgr = cv.bitwise_and(frame, frame, mask=mask_bgr)
res_hsv = cv.bitwise_and(frame, frame, mask=mask_hsv)
res_blur = cv.bitwise_and(frame, frame, mask=mask_blur)
#Edge detection
#sobel_x = cv.filter2D(grayv1, -1, sobelxKernel)
gray_blur = cv.GaussianBlur(grayv1, (13,13), 0)
canny = cv.Canny(blur, 20, 70)
gray2canny = cv.Canny(gray, 20,70)
sobel_x_f = cv.Sobel(grayv1, cv.CV_64F, 1, 0, ksize=3)
sobel_x = cv.convertScaleAbs(sobel_x_f)
sobel_y_f = cv.Sobel(grayv1, cv.CV_64F, 0, 1, ksize=3)
sobel_y = cv.convertScaleAbs(sobel_y_f)
##Draw contours
contours_x, hiearchy_x = cv.findContours(sobel_x, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#cv.drawContours(showFrame, contours_x, -1, (0,255,0), 3)
contours_y, hiearchy_y = cv.findContours(sobel_y, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
##Canny contours
contours_c, h_c = cv.findContours(canny, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#Mean Squared Error
##Flashy rectangle (now circle)
if time.time() - startTime < 10:
circleColor = (255,225,0)
if time.time() - startTime >= 10 and time.time() - startTime < 30:
circleColor = (0,225,255)
if time.time() - startTime >= 30 and time.time() - startTime < 50:
circleColor = (0,225,0)
##Grayscale map
res_templ = cv.matchTemplate(grayv1, template, cv.TM_CCOEFF_NORMED)
#Hough transformation
filter_gray = cv.cvtColor(res_blur, cv.COLOR_BGR2GRAY)
circles = cv.HoughCircles(filter_gray, cv.HOUGH_GRADIENT, 1, 300, param1=30, param2=10, minRadius=50, maxRadius=200)
#circleColor = (0,225,255)
if circles is not None:
circles = np.uint16(np.around(circles))
for i in circles[0,:]:
cv.circle(showFrame, (i[0], i[1]), i[2], circleColor, 2)
#Subtitle
subtitle = ""
#Switch frames
if time.time() - startTime < 10:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 10 and time.time() - startTime < 30:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 30 and time.time() - startTime < 50:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 50 and time.time() - startTime < 70:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 70 and time.time() - startTime < 90:
showFrame = blur
subtitle = "Medium Blur"
if time.time() - startTime >= 90 and time.time() - startTime < 110:
showFrame = blurBig
subtitle = "Large Blur"
if time.time() - startTime >= 110 and time.time() - startTime < 140:
showFrame = rgb
subtitle = "RGB"
if time.time() - startTime >= 140 and time.time() - startTime < 170:
showFrame = hsv
subtitle = "HSV"
if time.time() - startTime >= 170:
showFrame = sharp
subtitle = "Sharpen"
showFrame = frame
#cv.drawContours(showFrame, contours_c, -1, (0,255,0), 3)
cv.putText(showFrame, subtitle, (10, 100), cv.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
cv.imshow('test',res_templ)
#out.write(showFrame)
if cv.waitKey(25) & 0xFF == ord('q'):
break
else:
break
mov.release()
cv.destroyAllWindows()
import cv2 as cv
import numpy as np
import time
mov = cv.VideoCapture('../resources/60secondsT.mp4')
#mov = cv.VideoCapture('D:/GoPro tennis/tenniscut1.mp4')
#mov = cv.VideoCapture(0)
width = int(mov.get(3))
height = int(mov.get(4))
out = cv.VideoWriter('../resources/outputCollorSpace.avi',
cv.VideoWriter_fourcc('M','J','P','G'),
30, (width, height))
template = cv.imread('../resources/template.jpg', 0)
test = cv.imread('../resources/test.jpg')
#Initialize Kernels
sharpenKernel = np.full((3,3), -1)
sharpenKernel[2][2] = 8
gblurKernel1 = np.full((9,9), 1/81)
gblurKernel2 = np.full((15,15), 1/225)
normalKernel = np.full((3,3), 0)
normalKernel[2][2] = 1
sobelxKernel = np.matrix('-1,-2,-1; 0,0,0; 1,2,1')
sobelykernel = np.matrix('-1, 0, 1; -2, 0, 2; -1, 0, 1')
#Variables
changeFrame = False
startTime = time.time()
framenumber = 0
while (mov.isOpened()):
ret,frame = mov.read()
if ret == True:
fps = out.get(cv.CAP_PROP_POS_MSEC)
framenumber = framenumber + 1
print("time = " + str(fps))
#Frames
showFrame = frame
original = cv.filter2D(frame, -1, normalKernel)
sharp = cv.filter2D(frame,-1,sharpenKernel)
blur = cv.filter2D(frame, -1, gblurKernel1)
blurBig = cv.filter2D(frame, -1, gblurKernel2)
##Frame to BGR Grayscale
grayv1 = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
gray = cv.cvtColor(grayv1, cv.COLOR_GRAY2BGR)
##Colorspaces
rgb = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
hsv = cv.cvtColor(gray, cv.COLOR_BGR2HSV)
##Threshold frame
true_hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
lower_bound = np.array([30,55,0])
upper_bound = np.array([70,255,255])
lower_bound_rgb = np.array([50, 80, 0])
upper_bound_rgb = np.array([255, 255, 255])
### Use blur for smoothing
true_hsv_blur = cv.cvtColor(blur, cv.COLOR_BGR2HSV)
### Mask for range and Res for color
mask_bgr = cv.inRange(frame, lower_bound_rgb, upper_bound_rgb)
mask_hsv = cv.inRange(true_hsv, lower_bound, upper_bound)
mask_blur = cv.inRange(true_hsv_blur, lower_bound, upper_bound)
res_bgr = cv.bitwise_and(frame, frame, mask=mask_bgr)
res_hsv = cv.bitwise_and(frame, frame, mask=mask_hsv)
res_blur = cv.bitwise_and(frame, frame, mask=mask_blur)
#Edge detection
#sobel_x = cv.filter2D(grayv1, -1, sobelxKernel)
gray_blur = cv.GaussianBlur(grayv1, (13,13), 0)
canny = cv.Canny(blur, 20, 70)
gray2canny = cv.Canny(gray, 20,70)
sobel_x_f = cv.Sobel(grayv1, cv.CV_64F, 1, 0, ksize=3)
sobel_x = cv.convertScaleAbs(sobel_x_f)
sobel_y_f = cv.Sobel(grayv1, cv.CV_64F, 0, 1, ksize=3)
sobel_y = cv.convertScaleAbs(sobel_y_f)
##Draw contours
contours_x, hiearchy_x = cv.findContours(sobel_x, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#cv.drawContours(showFrame, contours_x, -1, (0,255,0), 3)
contours_y, hiearchy_y = cv.findContours(sobel_y, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
##Canny contours
contours_c, h_c = cv.findContours(canny, cv.RETR_TREE , cv.CHAIN_APPROX_SIMPLE)
#Mean Squared Error
##Flashy rectangle (now circle)
if time.time() - startTime < 10:
circleColor = (255,225,0)
if time.time() - startTime >= 10 and time.time() - startTime < 30:
circleColor = (0,225,255)
if time.time() - startTime >= 30 and time.time() - startTime < 50:
circleColor = (0,225,0)
##Grayscale map
res_templ = cv.matchTemplate(grayv1, template, cv.TM_CCOEFF_NORMED)
#Hough transformation
filter_gray = cv.cvtColor(res_blur, cv.COLOR_BGR2GRAY)
circles = cv.HoughCircles(filter_gray, cv.HOUGH_GRADIENT, 1, 300, param1=30, param2=10, minRadius=50, maxRadius=200)
#circleColor = (0,225,255)
if circles is not None:
circles = np.uint16(np.around(circles))
for i in circles[0,:]:
cv.circle(showFrame, (i[0], i[1]), i[2], circleColor, 2)
#Subtitle
subtitle = ""
#Switch frames
if time.time() - startTime < 10:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 10 and time.time() - startTime < 30:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 30 and time.time() - startTime < 50:
showFrame = frame
subtitle = "BGR"
if time.time() - startTime >= 50 and time.time() - startTime < 70:
showFrame = gray
subtitle = "Gray"
if time.time() - startTime >= 70 and time.time() - startTime < 90:
showFrame = blur
subtitle = "Medium Blur"
if time.time() - startTime >= 90 and time.time() - startTime < 110:
showFrame = blurBig
subtitle = "Large Blur"
if time.time() - startTime >= 110 and time.time() - startTime < 140:
showFrame = rgb
subtitle = "RGB"
if time.time() - startTime >= 140 and time.time() - startTime < 170:
showFrame = hsv
subtitle = "HSV"
if time.time() - startTime >= 170:
showFrame = sharp
subtitle = "Sharpen"
showFrame = frame
#cv.drawContours(showFrame, contours_c, -1, (0,255,0), 3)
cv.putText(showFrame, subtitle, (10, 100), cv.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)
cv.imshow('test',res_templ)
#out.write(showFrame)
if cv.waitKey(25) & 0xFF == ord('q'):
break
else:
break
mov.release()
cv.destroyAllWindows()
